//constructors
    public Cylinder() // default constructor
    {
        radius = 1.0;
        height = 2.0;
    }

    public Cylinder(double r, double h) // normal constructor
    {
        radius = r;
        height = h;
    }

    public Cylinder(Cylinder c) // copy constructor
    {
        radius = c.radius;
        height = c.height;
    }
        //accessors
        public double getRadius() {return radius;}
        public double getHeight() {return height;}
        
        //mutators
        public void setHeight(double tinggi) {height = tinggi;}
        public void setRadius(double jejari) {radius = jejari;}

    public double calcVolume()
    {
       return radius*radius*3.14159*height;
    }
    
    public static void main(String[] args) {
        
        Cylinder a = new Cylinder(3.0, 8.0);
        System.out.println("The radius of a cylinder is 3.0cm and the height is 8.0cm.\nWith the information given, the volume of the cylinder is "+a.calcVolume()+"cm^2.");
    }

//calling an array of object
    Order[] ord = new Order[2]; //outside of loop
    ord[i] = new Order(tableNum, quantity, orderMenu); //inside a loop

//input for queue/stack

         for(int i=0; i<5; i++){
      System.out.println("\nVideo Type: ");
       videoType=scan.nextLine();
       System.out.println("Duration(minutes): ");
       duration=Double.parseDouble(scan.nextLine());
       System.out.println("Producer: ");
       producer=scan.nextLine();
       System.out.println("File type: ");
       fileType=scan.nextLine();
       Video v = new Video(videoType, duration, producer, fileType);
       videostack.push(v);
     }

//loop for queue/stack

         while(!videostack.isEmpty()){
         Video v = videostack.pop();
         if(v.getVideoType().equalsIgnoreCase("Music"))
            musicStack.push(v);
         else if(v.getVideoType().equalsIgnoreCase("Educational"))
            educationStack.push(v);
     }

//restore all data back to original queue/stack

        while(!fypStack.isEmpty()){
            FYP f = fypStack.pop();
            if(f.getField().equalsIgnoreCase("Networking")){
                networkingStack.push(f);
                networkCount++;
            }
            holdStack.push(f);
        }

        while(!holdStack.isEmpty()) {
            FYP f = holdStack.pop();
            fypStack.push(f);
        }

// if else using substring comparison

            if(f.getSupervisor().startsWith("Dr"))
                System.out.println(f.toString());
            OR
            if(f.getSupervisor().substring(0,2).equalsIgnoreCase("Dr"))
                System.out.println(f.toString());
        }
//switch 
    switch(orderMenu) {
    case 1:{name="Tom Yunk Campur";total += 12.9;break;}
    case 2:{name="Siakap 2+1 Rasa";total += 27.6;break;}
    case 3:{name="Ikan Merapu Stim Aq Yahoo";total += 30.0;break;}
    case 4:{name="Mee Goreng Ayum";total += 7.8;break;}
    case 5:{name="Udang/Sotong Goreng Tepunk";total += 6.0;break;}
    case 6:{name="Telur Goreng";total += 4.5;break;}
    case 7:{name="Sayur Kang Keng Kong Goreng";total += 5.0;break;}
    case 8:{name="Lamb Chop";total += 25.0;break;}
    case 9:{name="Nasi Goreng LGBT";total += 26.5;break;}
    case 10:{name="Nasi Putih";total += 1.8;break;}
    case 11:{name="Mango Juice";total += 2.9;break;}
    case 12:{name="Chocolate Milk";total += 7.6;break;}
    case 13:{name="Fresh Milk";total += 3.0;break;}
    case 14:{name="Iced Cincau";total += 7.8;break;}
    case 15:{name="Carrot Juice";total += 6.0;break;}
    case 16:{name="Iced Thin Ass Lime";total += 4.5;break;}
    case 17:{name="Soy Bean Milk";total += 5.0;break;}
    case 18:{name="Pen PineApple Juice";total += 5.0;break;}
    case 19:{name="WaterMELON Juice";total += 6.5;break;}
    case 20:{name="Sugar cane Juice";total += 1.8;break;}       
        default: System.out.println("\nERROR : Unknown Input");}

    switch(vehicle) {
        case "c":
        {
            parkFee=2.00;
            break;
        }
        case "b":
        {
            parkFee=3.00;
            break;
        }
        case "t":
        {
            parkFee=4.00;
            break;
        }
        default: System.out.println("\nERROR : Unknown Input");
    }

//for loop
    for(int i=0; i<individual.length; i++) {
            individual[i] = new Family();

            System.out.println("\nPlease insert your Id Number : ");
             individual[i].id = str.nextLine();
            System.out.println("\nYour Race || Malay(M), Chinese(C), Indian(I): ");
             individual[i].race = str.nextLine();
            System.out.println("\nYour Monthly Income : RM");
             sumIncome += individual[i].income = num.nextDouble();
            System.out.println("\nNumber of Childrens : ");
             sumChild += individual[i].numberChild = num.nextInt();
            System.out.println("\nState of Residency : ");
             individual[i].state = str.nextLine();

            if(individual[i].race.equals("M"))
                incomeMalay+= individual[i].income;
            else if(individual[i].race.equals("C"))
                incomeChinese+= individual[i].income;
            else if(individual[i].race.equals("I"))
                incomeIndian+= individual[i].income;
    }

//read file
    import java.util.StringTokenizer;

    public class FileReadWrite {
        public static void main(String[] args) {
            try {
                double total=0;
                int product=0;
                FileReader fr = new FileReader("in.txt");
                BufferedReader br = new BufferedReader(fr);
                String strLine;

                FileWriter wr = new FileWriter("out.txt");
                PrintWriter pw = new PrintWriter(wr);

                while ((strLine = br.readLine()) != null) {
                    StringTokenizer data = new StringTokenizer(strLine,";");

                    //String name = data.nextToken();
                    double price = Double.parseDouble(data.nextToken());
                    total=total+price;

                    product++;
                }
                pw.println("Product :"+product+"Total :"+total);
                br.close();
                pw.close();
                
            }
            catch(Exception e) {
                System.err.println("Error : "+e.getMessage());
            }
        }
    }

//write file
    import java.io.*;
    import java.util.Scanner;

    public class FileWrite {
        public static void main(String[] args) {
            try { Scanner scanner = new Scanner(System.in);
                FileWriter wr = new FileWriter("list.txt", true);
                PrintWriter pw = new PrintWriter(wr);

                pw.println("====================");
                for(int i=0; i<1; i++) {
                    System.out.print("\nName : ");
                    String name = scanner.next();
                    System.out.print("\nPrice : ");
                    double price = scanner.nextDouble();
                    Products p1 = new Products(name,price);

                    pw.print(p1.name+";"+p1.price);
                }
                pw.close();
                scanner.close();
            }
            catch(Exception e)
                {
                    System.err.println("error : "+e.getMessage());
                }
                
        }
    }

//sort rows and collumns
    "%-20s%-20s%-20s%-30s%-20s\r\n"+lectName+staffID+facCode+assType+masterNum+copiesNum;
    pw.printf("\n\t%-20s%-10s%-20.2f\r\n","Total","", total);
     pw.printf("\t%-20s%-10s%-20s\r\n","Item" ,"Qty","Price");

//do while loop
     do{ 
            System.out.println("\nPLease insert the table number :- "); 
            tableNum = num.nextInt(); //need fix : shouldnt be repeated 
            System.out.println("\nPLease insert the item Code to order :- ");
            orderMenu = num.nextInt();
            System.out.println("\nPLease insert the quantity of the order :- ");
            quantity = num.nextInt();
            ord[i] = new Order(tableNum, quantity, orderMenu);
            ord[i].setPrice();
            System.out.println("\nDo you want to make another order? (Y/N)");
            response = sc.nextLine();
            if (response.equalsIgnoreCase("Y"))
                i++;
            }while (response.equalsIgnoreCase("Y"));  

//sorting array 
    import java.util.Scanner;
    public class bubbleSort {
        public static void main(String[] args) {
            int[] num = new int[6];
            int temp = 0;

            Scanner numScanner = new Scanner(System.in);

            for(int i=0; i<num.length; i++) {
            System.out.println("Insert a num");
            num[i] = numScanner.nextInt();
            }
            System.out.println("Numbers before being sorted :- \n"+num[0]+" "+num[1]+" "+num[2]+" "+num[3]+" "+num[4]+" "+num[5]);

            for(int i=0; i<num.length; i++) {
                for(int u=1; u<(num.length-i); u++) {
                    if(num[u-1] > num[u]){
                        temp = num[u-1];
                    num[u-1] = num[u];
                    num[u] = temp;
                    }
                }
            }
            System.out.println("Numbers after being sorted :- \n"+num[0]+" "+num[1]+" "+num[2]+" "+num[3]+" "+num[4]+" "+num[5]);
            numScanner.close();
        }
    }

//bubble sort 

     for(int i=0; i<num.length; i++) {
            for(int u=1; u<(num.length-i); u++) {
                if(num[u-1] > num[u]){
                    temp = num[u-1];
                num[u-1] = num[u];
                num[u] = temp;
                }
            }

//binary search

    System.out.println("\nEnter COOKIES NAME to be searched: ");
            String nameSearch = sc.nextLine();
            index = Collections.binarySearch(cookiesAL, nameSearch);
            for(int i=0;i<cookiesAL.size();i++) {
                if(cookiesAL.get(i)==nameSearch)
                    index = i;
            }
        System.out.println("The cookies name "+nameSearch+" is found at index "+index);